
# this makefile should be included by a makefile which sets
# source, pgfimgs and dependencies

SHELL = /bin/bash
REPORT_PATH = $(HOME)/mods/TEX/report
VPATH = $(REPORT_PATH)/tex
TMPDIR = textmp~

# set options
result = report
tex_comp = lualatex
bib_comp = bibtex
python_comp = pythontex --interpreter python:python2
pdf_crop = pdfcrop
pdf_viewer = evince
img_gen = python images.py
mode = -interaction=nonstopmode -halt-on-error
opts = -output-directory=$(TMPDIR)
pipe = | grep -v "texmf"

# removes comments and double quotes from input and stores it for searching
#input = $(shell sed 's/%.*$$//;s/"//g' $(source).tex)
# find images; grep finds input/includegraphics in (only) the main input file, then sed captures the filenames and
# uniq removes duplicates; then department logo is appended
#pgfs = $(addsuffix .pgf,$(sort $(shell echo "$(input)" | grep --only-matching --regexp \
#	'\\pgfimg\(\[[^][]*\]\)\?{[^{}]\+}' | sed -n 's/.*{\(.*\)}.*/\1/p' | uniq)))
#images = $(shell echo "$(input)" | grep --only-matching --regexp \
#	'\\\(input\|includegraphics\)\(\[[^][]*\]\)\?{[^{}]\+}' | sed -n 's/.*{\(.*\)}.*/\1/p' | uniq) \
#	$(shell sed -n 's/.*{\\departmentlogo}{\([^{}]\+\)}.*/\1/p' $(source).tex)
# find included pdf files; method similar to image search
# includes = $(shell echo "$(input)" | grep --only-matching --regexp '\\include{[^{}]*}' | sed 's/.*{\(.*\)}.*/\1.tex/' | uniq)

# image files
img_pgfs = $(addsuffix .pgf,$(pgfimgs))
#img_texs = $(img_pgfs:.pgf=.tex)
img_pdfs = $(img_pgfs:.pgf=.pdf)
#report_imgs = $(notdir $(wildcard $(REPORT_PATH)/img/*.pgf) $(wildcard $(REPORT_PATH)/img/*.jpg) $(wildcard $(REPORT_PATH)/img/*.png))
#gen_imgs = $(filter-out $(report_imgs),$(images) $(pgfs))

# aliasses
logfile = $(TMPDIR)/$(result).log
compile_cmd = $(tex_comp) $(mode) $(opts) -jobname="$(result)" "$(source).tex" $(pipe)
bibtex_cmd = if grep 'Please (re)run BibTeX' "$(TMPDIR)/$(result).log"; then /bin/cd "$(TMPDIR)"; $(bib_comp) "$(result).aux"; fi;
pytex_cmd = if grep 'pythontex.sty' "$(TMPDIR)/$(result).log"; then $(python_comp) "$(TMPDIR)/$(result).pytxcode"; fi;
recompile_cmd = @if grep 'Please (re)run BibTeX' "$(logfile)" || grep 'pythontex.sty' "$(logfile)"; then $(compile_cmd); fi;
mv_cmd = if grep 'no output PDF file produced' "$(TMPDIR)/$(result).log"; then /bin/rm -f "$(result).pdf"; else /bin/mv "$(TMPDIR)/$(result).pdf" "$(result).pdf"; fi;
show_cmd = @if [ -f "$(result).pdf" ]; then $(pdf_viewer) "$(result).pdf"; else echo "no '$(result).pdf'\; making failed?"; fi;

# default action to compile the whole project
all: show $(img_pdfs)

# compile everything without showing
bg: $(result).pdf
	@if [ -f "$(result).pdf" ]; then echo "use 'make show' to open the pdf"; else echo "no '$(result).pdf'; making failed?"; fi;

# compile everything and show
show: $(result).pdf
	$(show_cmd)

# recompile (by removing files and then running 'make show'
re: rm
	@echo "clearing derived files and remaking project"
	$(MAKE) show

# information
info:
	@echo ""
	@echo "build the latest *.tex file ($(source).tex) into $(result).pdf"
	@echo ""
	@echo "info:   show this info"
	@echo "debug:  show debug info"
	@echo "show:   build the report and open it [default]"
	@echo "bg:     build the report"
	@echo "re:     clear and then rebuild the project"
	@echo "single: one compile iteration (possibly missing references)"
	@echo "merge:  resolve all inputs and replace python by output"
	@echo "clean:  remove temporary build files"
	@echo "rm:     remove many derived files (not images)"
	@echo "imgs:   regenerate all images"
	@echo ""
	@echo "other targets: $(img_pdfs)"
	@echo "dependencies:  $(dependencies)"
	@echo ""

# debug info - subject to change
debug:
	@echo ""
	@echo "building latest .tex file: $(source).tex"
	@echo ""
	@echo "SHELL:       $(SHELL)"
	@echo "REPORT_PATH: $(REPORT_PATH)"
	@echo "VPATH:       $(VPATH)"
	@echo "TEXINPUTS:   $(TEXINPUTS)"
	@echo "TMPDIR:      $(TMPDIR)"
	@echo "source:      $(source)"
	@echo "result:      $(result)"
	@echo "tex_comp:    $(tex_comp)"
	@echo "bib_comp:    $(bib_comp)"
	@echo "pdf_crop:    $(pdf_crop)"
	@echo "pdf_viewer:  $(pdf_viewer)"
	@echo "img_gen:     $(img_gen)"
	@echo "mode:        $(mode)"
	@echo "opts:        $(opts)"
	@echo "pipe:        $(pipe)"
	@echo "logfile:     $(logfile)"
	@echo "compile_cmd: $(compile_cmd)"
	@echo "bibtex_cmd:  $(bibtex_cmd)"
	@echo "pytex_cmd:   $(pytex_cmd)"
	@echo "recompile_cmd:$(recompile_cmd)"
	@echo "mv_cmd:      $(mv_cmd)"
	@echo "show_cmd:    $(show_cmd)"
	@echo "report_imgs: $(report_imgs)"
	@echo "gen_imgs:    $(gen_imgs)"
	@echo "images:      $(images)"
	@echo "pgfs:        $(pgfs)"
	@echo "img_pgfs:    $(img_pgfs)"
	@echo "img_texs:    $(img_texs)"
	@echo "img_pdfs:    $(img_pdfs)"
	@echo "includes:    $(includes)"
	@echo ""
	@echo "if there is no rule to make files like header*.tex, check that REPORT_PATH (top) is set "
	@echo "correctly; currently it is set to $(REPORT_PATH) and tex/ contains: "
	@echo "$(shell ls $(REPORT_PATH)/tex/)"

# remove temporary tex files
clean:
	cd "$(TMPDIR)"; /bin/rm -rf *.log *.aux *.toc *-blx.bib *.run.xml *.bbl *.blg *.out .waste *.pyc *.pytxcode pythontex-files-*

# remove temporary and result files
rm:	clean
	/bin/rm -rf "$(TMPDIR)" "$(result).pdf" flat.tex $(img_pgfs)

name: $(source).tex
	echo "$(source)"

# compile the final .pdf using all the image .pdfs (repeating to get references right)
$(result).pdf: $(dependencies) $(img_pdfs) $(source).tex
	mkdir -p $(TMPDIR)
	$(compile_cmd)
	$(bibtex_cmd)
	$(pytex_cmd)
	$(recompile_cmd)
	k=3; while [ $$k -gt 0 ] && grep 'Rerun to get ' "$(logfile)"; do $(compile_cmd); ((k++)); done
	$(mv_cmd)

# single run compile; may have missing page numbers and references, but faster
single: $(dependencies) $(img_pdfs) $(source).tex
	mkdir -p $(TMPDIR)
	$(compile_cmd)
	$(bibtex_cmd)
	$(pytex_cmd)
	$(recompile_cmd)
	$(mv_cmd)
	$(show_cmd)

# resolve all includes to create one single document, and replace all python code by it's output
flatten: $(source).tex $(dependencies)
	mkdir -p $(TMPDIR)
	python ~/mods/flattentex/flatex.py "$(source).tex" > flat.tex
	@echo "REMOVING PYTHON WITH depythontex NOT IMPLEMENTED"
	$(compile_cmd)

# convert image .tex files to .pdf files
$(img_pdfs): %.pdf: %.pgf
	mkdir -p $(TMPDIR)
	@printf '\\documentclass[a4paper,UTF8]{article} \\include{packages_minimal} \\usepackage{tikz} \\usepackage{pgf} \\begin{document} \\pagenumbering{gobble}\n' > "$(TMPDIR)/$(basename $@).tex"
	@cat $(notdir $^) >> "$(TMPDIR)/$(basename $@).tex"
	@printf '\\end{document}\n%% $(shell date)' >> "$(TMPDIR)/$(basename $@).tex"
	cd $(TMPDIR) ; $(tex_comp) $(mode) '$(basename $@).tex' $(pipe)
	$(pdf_crop) "$(TMPDIR)/$@" "$(TMPDIR)/$@"

%.png:
	cp -f $< $@

# .pgf files need to be created by the makefile that includes this one


